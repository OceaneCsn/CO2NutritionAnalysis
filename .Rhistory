install.packages("plotly")
shiny::runApp('~/Documents/ShinyApp/ClusteringAnalysis')
runApp('~/Documents/ShinyApp/ClusteringAnalysis')
library(ggplot2)
library(gridExtra)
suppressMessages(library(coseq, warn.conflicts = F, quietly = T))
load("./Data/normalized.count_At.RData")
load("./Data/OntologyAllGenes.RData")
load("./Data/filteredData.RData")
load("./Data/NitrateGenes.RData")
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
#plots <- plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3) + scale_colour_discrete("Condition")
}
else{
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.02) +
scale_colour_discrete("Condition")
}
}
plotProfile(cluster, k=3)
library(plotly)
library(ggplotly)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
#plots <- plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3) + scale_colour_discrete("Condition")
}
else{
ggplotly(ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.02) +
scale_colour_discrete("Condition"))
}
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_violin(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
g <- g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
ggplotly(g)
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_violin(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
g <- g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
ggplotly(g, tooltip=c("x", "y", "colour"))
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_violin(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
g <- g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
ggplotly(g, tooltip=c("x", "y", "colour"))
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_violin(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
ggplotly(g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25) , tooltip=c("x", "y", "colour"))
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_violin(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
ggplotly(g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25) , tooltip=c("group", "y", "colour"))
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_violin(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value, text=group)) + geom_violin(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value, text=group)) + geom_violin(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
g <- g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
ggplotly(g, tooltip=c("text"))
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value, text=group)) + geom_boxplot(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
g <- g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
ggplotly(g, tooltip=c("text"))
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value, text=group, group=1)) + geom_boxplot(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
g <- g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
ggplotly(g, tooltip=c("text"))
}
plotProfile(cluster, k=3)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
g <- ggplot(data = d, aes(x=group, y=value)) + geom_violin(alpha=0.7, lwd=1.2, aes( color = group), fill = "grey", outlier.color = "black",outlier.alpha =0.1)  + geom_jitter(width = 0.1, alpha=0.015) +facet_wrap(~cluster, nrow=4)
}
else{
g <- ggplot(data = d[d$cluster==k,], aes(x=group, y=value, text=group)) + geom_boxplot(lwd=1.2, outlier.alpha =0.2, outlier.color = "black", alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.0015)
}
g <- g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=8.5, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
ggplotly(g, tooltip=c("text"))
}
plotProfile(cluster, k=3)
suppressMessages(library(coseq, warn.conflicts = F, quietly = T))
coseq:::coseq
g
shiny::runApp('~/Documents/ShinyApp/ClusteringAnalysis')
runApp('~/Documents/ShinyApp/ClusteringAnalysis')
runApp('~/Documents/ShinyApp/ClusteringAnalysis')
runApp('~/Documents/ShinyApp/Network_visualisation')
install.packages("heatmaply")
library(plotly)
runApp('~/Documents/ShinyApp/Network_visualisation')
runApp('~/Documents/ShinyApp/Network_visualisation')
showMethods('coseq')
coseq:::coseq()
coseq:::coseq
showMethods("coseq")
runApp('~/Documents/ShinyApp/ClusteringAnalysis')
load("./Data/filteredData.RData")
colnames(data)
colnames(data)
data[,grepl("F", colnames(data))]
reremoveIronStarv
removeIronStarv = T
reremoveIronStarv
removeIronStarv = T
removeIronStarv
data <- data[,grepl("F", colnames(data))]
data
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
setwd("~/Documents/CombinatoireFeNCO2/Analyses")
#setwd("D:/These/CO2NutritionAnalysis/")
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./Imports/ToolFunctions.R")
source("./Imports/VisuFunctions.R")
PATH_TO_DEG <- "~/Documents/Seafile/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/"
#PATH_TO_DEG <- "D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/Arabidopsis"
geneList <- function(comp, filter=F){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$meanNormalizedExpression > 30,]}
return(as.vector(At$ensembl_gene_id))
}
removeIronStarv = T
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
FactorCO2 <- c(paste("cNF", "CNF"), paste("cnF", "CnF"))
FactorNitrate <- c(paste("cNF", "cnF"), paste("CNF", "CnF"))
if(!removeIronStarv){
FactorCO2 <- c(FactorCO2,paste("cNf", "CNf"), paste("cnf", "Cnf"))
FactorNitrate <- c(FactorNitrate,paste("cNf", "cnf"), paste("CNf", "Cnf"))
FactorIron <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
}
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cnF", "CnF")]] <- geneList(c("cnF", "CnF"))
if(!removeIronStarv){
DEGs[[paste("cNf", "CNf")]] <- geneList(c("cNf", "CNf"))
DEGs[[paste("cnf", "Cnf")]] <- geneList(c("cnf", "Cnf"))
}
path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
if(!removeIronStarv){
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
}
#save(DEGs, file = "./Data/DEGsListsFilteredNoIronStarv.RData")
View(DEGs)
runApp('~/Documents/ShinyApp/ClusteringAnalysis')
runApp('~/Documents/ShinyApp/ClusteringAnalysis')
g <- g +theme(plot.title = element_text(size=22, face="bold"),strip.text.x = element_text(size = 20),legend.position="bottom",legend.spacing=unit(0.3, "cm"),
legend.title = element_text(size = 2, face="bold"), legend.text = element_text(size=11, angle=0),legend.key.width = unit(0.15, "cm"),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0, hjust = 0, colour = "grey50"),legend.text.align=1,
axis.title=element_text(size=24)) + xlab("") + ylab("Normalized expression") + scale_colour_discrete("", labels=sapply(levels(as.factor(d$group)),translate)) +
stat_summary(fun.y=median, geom="line", aes(group=1), alpha=0.1, size = 1.5) +
ylim(0, 0.25)
runApp('~/Documents/ShinyApp/ClusteringAnalysis')
filter <- HTSFilter(as.matrix(data), groups, s.min=1, s.max=100)
source("./Imports/ToolFunctions.R")
library(HTSFilter)
library(stringr)
data <- read.csv("./Data/Niu_2015_CO2.txt", h=T, sep='\t')
cols <- grepl("CR", colnames(data))
data <- data[,cols]
genes <- data$Tracking_id
rownames(data) <- genes
conds = colnames(data)
groups <- str_split_fixed(conds, '_', 2)[,1]
filter <- HTSFilter(as.matrix(data), groups, s.min=1, s.max=100)
mat <- filter$filteredData
data <- mat
head(data)
data <- data[data>10,]
data>10
data <- data[data>10]
data
head(data)
data <- data[data>10,]
data <- read.csv("./Data/Niu_2015_CO2.txt", h=T, sep='\t')
cols <- grepl("CR", colnames(data))
data <- data[,cols]
genes <- data$Tracking_id
rownames(data) <- genes
conds = colnames(data)
groups <- str_split_fixed(conds, '_', 2)[,1]
heatmap(as.matrix(data[sample(rownames(data), 200),]))
na.omit(data)
data <- na.omit(data)
data <- na.omit(data)
data <- data[data>10,]
head(data)
heatmap(as.matrix(data[sample(rownames(data), 200),]))
data[sample(rownames(data), 200),]
data <- na.omit(data)
na.omit(data)
data <- read.csv("./Data/Niu_2015_CO2.txt", h=T, sep='\t')
cols <- grepl("CR", colnames(data))
data <- data[,cols]
genes <- data$Tracking_id
rownames(data) <- genes
conds = colnames(data)
groups <- str_split_fixed(conds, '_', 2)[,1]
data <- read.csv("./Data/Niu_2015_CO2.txt", h=T, sep='\t')
genes <- data$Tracking_id
rownames(data) <- genes
cols <- grepl("CR", colnames(data))
data <- data[,cols]
conds = colnames(data)
groups <- str_split_fixed(conds, '_', 2)[,1]
data <- na.omit(data)
data <- data[data>10,]
head(data)
heatmap(as.matrix(data[sample(rownames(data), 200)]) )
heatmap(as.matrix(data[sample(rownames(data), 200),]) )
as.matrix(data[sample(rownames(data), 200),])
rownames(data)
length(rownames(data))
length(unique(rownames(data)))
sample(rownames(data), 200)
sample(rownames(data), 200)
sample(rownames(data), size=200)
rownames(data)
rownames(data)
omit.na(rownames(data))
na.omit(rownames(data))
sum(is.na(rownames(data)))
heatmap(as.matrix(data[sample(rownames(data), 200),]) )
sample(rownames(data), 200)
data <- na.omit(data)
data <- data[data>10,]
data <- na.omit(data)
data <- read.csv("./Data/Niu_2015_CO2.txt", h=T, sep='\t')
genes <- data$Tracking_id
rownames(data) <- genes
cols <- grepl("CR", colnames(data))
data <- data[,cols]
conds = colnames(data)
groups <- str_split_fixed(conds, '_', 2)[,1]
data <- data[data>10,]
data <- na.omit(data)
head(data)
heatmap(as.matrix(data[sample(rownames(data), 200),]) )
heatmap(as.matrix(data[sample(rownames(data), 400),]) )
heatmap(as.matrix(data[sample(rownames(data), 400),]) )
heatmap(as.matrix(data[sample(rownames(data), 400),]) )
res <- dualDE(data, c("ACR", "ECR"))
genesNiu <- res
save("./Data/DEG_Nui_2015_CO2.RData")
save(genesNiu, file = "./Data/DEG_Nui_2015_CO2.RData")
genesNiu
load("Data/DEGsListsFiltered.RData")
DEG_CO2_controle <- DEGs[["cNF CNF"]]
ggVennDiagram(list("Niu_2015" = genesNiu$gene_id, "Nous" = DEG_CO2_controle ))
library(ggVennDiagram)
ggVennDiagram(list("Niu_2015" = genesNiu$gene_id, "Nous" = DEG_CO2_controle ))
OntologyProfile(ids = intersect(genesNiu$gene_id, DEG_CO2_controle))
common <- OntologyProfile(ids = intersect(genesNiu$gene_id, DEG_CO2_controle))
View(common)
res <- dualDE(data, c("ACR", "ECR"), plot = T)
ggVennDiagram(list("Niu_2015" = genesNiu$gene_id, "Nous" = DEGs[["cnF CnF"]] ))
common <- OntologyProfile(ids = intersect(genesNiu$gene_id, DEGs[["cnF CnF"]]))
View(common)
